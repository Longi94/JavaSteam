package in.dragonbra.javasteam.base;

import in.dragonbra.javasteam.generated.MsgClientChatEnter;
import in.dragonbra.javasteam.steam.CMClient;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author lngtr
 * @since 2018-02-25
 */
public class ClientMsgTest {

    // this test vector is a packet meant for a ClientMsg<MsgClientChatEnter>
    private static final byte[] STRUCT_MSG_DATA = new byte[] {
            (byte) 0x27, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x24, (byte) 0x02, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xAC, (byte) 0x15, (byte) 0x89, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x01,
            (byte) 0x8E, (byte) 0x56, (byte) 0x11, (byte) 0x00, (byte) 0xBC, (byte) 0x4E, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xBC, (byte) 0x4E, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x70, (byte) 0x01,
            (byte) 0xBC, (byte) 0x4E, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x70, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x53, (byte) 0x61, (byte) 0x78, (byte) 0x74, (byte) 0x6F, (byte) 0x6E, (byte) 0x20, (byte) 0x48, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x00, (byte) 0x00, (byte) 0x4D, (byte) 0x65,
            (byte) 0x73, (byte) 0x73, (byte) 0x61, (byte) 0x67, (byte) 0x65, (byte) 0x4F, (byte) 0x62, (byte) 0x6A, (byte) 0x65, (byte) 0x63, (byte) 0x74, (byte) 0x00, (byte) 0x07, (byte) 0x73, (byte) 0x74, (byte) 0x65,
            (byte) 0x61, (byte) 0x6D, (byte) 0x69, (byte) 0x64, (byte) 0x00, (byte) 0xAC, (byte) 0x15, (byte) 0x89, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x01, (byte) 0x02, (byte) 0x70, (byte) 0x65,
            (byte) 0x72, (byte) 0x6D, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x69, (byte) 0x6F, (byte) 0x6E, (byte) 0x73, (byte) 0x00, (byte) 0x7B, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x44,
            (byte) 0x65, (byte) 0x74, (byte) 0x61, (byte) 0x69, (byte) 0x6C, (byte) 0x73, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x08, (byte) 0x00, (byte) 0x4D, (byte) 0x65,
            (byte) 0x73, (byte) 0x73, (byte) 0x61, (byte) 0x67, (byte) 0x65, (byte) 0x4F, (byte) 0x62, (byte) 0x6A, (byte) 0x65, (byte) 0x63, (byte) 0x74, (byte) 0x00, (byte) 0x07, (byte) 0x73, (byte) 0x74, (byte) 0x65,
            (byte) 0x61, (byte) 0x6D, (byte) 0x69, (byte) 0x64, (byte) 0x00, (byte) 0x00, (byte) 0x28, (byte) 0x90, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x01, (byte) 0x02, (byte) 0x70, (byte) 0x65,
            (byte) 0x72, (byte) 0x6D, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x69, (byte) 0x6F, (byte) 0x6E, (byte) 0x73, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x44,
            (byte) 0x65, (byte) 0x74, (byte) 0x61, (byte) 0x69, (byte) 0x6C, (byte) 0x73, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x08, (byte) 0x00, (byte) 0x4D, (byte) 0x65,
            (byte) 0x73, (byte) 0x73, (byte) 0x61, (byte) 0x67, (byte) 0x65, (byte) 0x4F, (byte) 0x62, (byte) 0x6A, (byte) 0x65, (byte) 0x63, (byte) 0x74, (byte) 0x00, (byte) 0x07, (byte) 0x73, (byte) 0x74, (byte) 0x65,
            (byte) 0x61, (byte) 0x6D, (byte) 0x69, (byte) 0x64, (byte) 0x00, (byte) 0xB0, (byte) 0xDC, (byte) 0x5B, (byte) 0x04, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x01, (byte) 0x02, (byte) 0x70, (byte) 0x65,
            (byte) 0x72, (byte) 0x6D, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x69, (byte) 0x6F, (byte) 0x6E, (byte) 0x73, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x44,
            (byte) 0x65, (byte) 0x74, (byte) 0x61, (byte) 0x69, (byte) 0x6C, (byte) 0x73, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x08, (byte) 0x00, (byte) 0x4D, (byte) 0x65,
            (byte) 0x73, (byte) 0x73, (byte) 0x61, (byte) 0x67, (byte) 0x65, (byte) 0x4F, (byte) 0x62, (byte) 0x6A, (byte) 0x65, (byte) 0x63, (byte) 0x74, (byte) 0x00, (byte) 0x07, (byte) 0x73, (byte) 0x74, (byte) 0x65,
            (byte) 0x61, (byte) 0x6D, (byte) 0x69, (byte) 0x64, (byte) 0x00, (byte) 0x39, (byte) 0xCB, (byte) 0x77, (byte) 0x05, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x01, (byte) 0x02, (byte) 0x70, (byte) 0x65,
            (byte) 0x72, (byte) 0x6D, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x69, (byte) 0x6F, (byte) 0x6E, (byte) 0x73, (byte) 0x00, (byte) 0x1A, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x44,
            (byte) 0x65, (byte) 0x74, (byte) 0x61, (byte) 0x69, (byte) 0x6C, (byte) 0x73, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x08, (byte) 0xE8, (byte) 0x03, (byte) 0x00,
            (byte) 0x00
    };

    @Test
    public void payloadReaderReadsNullTermString() throws IOException {
        ClientMsg<MsgClientChatEnter> msg = new ClientMsg<>(MsgClientChatEnter.class, CMClient.getPacketMsg(STRUCT_MSG_DATA));
        String chatName = msg.readNullTermString();

        assertEquals("Saxton Hell", chatName);
    }

    @Test
    public void payloadReaderDoesNotOverflowPastNullTermString() throws IOException {
        ClientMsg<MsgClientChatEnter> msg = new ClientMsg<>(MsgClientChatEnter.class, CMClient.getPacketMsg(STRUCT_MSG_DATA));
        String chatName = msg.readNullTermString();

        assertEquals("Saxton Hell", chatName);

        byte nextByte = msg.readByte();
        char mByte = (char) msg.readByte();

        // next byte should be a null
        assertEquals(0, nextByte);
        // and the one after should be the beginning of a MessageObject
        assertEquals('M', mByte);
    }
}