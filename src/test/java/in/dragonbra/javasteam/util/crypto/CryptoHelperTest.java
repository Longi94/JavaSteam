package in.dragonbra.javasteam.util.crypto;

import in.dragonbra.javasteam.TestBase;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class CryptoHelperTest extends TestBase {

    @Test
    public void crcHash() {
        byte[] data = new byte[]{
                (byte) 0x7F, (byte) 0x74, (byte) 0x44, (byte) 0x40, (byte) 0x9D, (byte) 0x7A, (byte) 0xE0, (byte) 0xF5,
                (byte) 0x8F, (byte) 0x71, (byte) 0x7, (byte) 0xF6, (byte) 0x2, (byte) 0xCF, (byte) 0x2F, (byte) 0xEC,
                (byte) 0x12, (byte) 0x65, (byte) 0x60, (byte) 0xE, (byte) 0x90, (byte) 0x1A, (byte) 0x97, (byte) 0x97,
                (byte) 0x8B, (byte) 0xF, (byte) 0x7C, (byte) 0x37, (byte) 0xF6, (byte) 0xC3, (byte) 0xE9, (byte) 0x2A,
                (byte) 0xE5, (byte) 0x83, (byte) 0x18, (byte) 0xAD, (byte) 0x2, (byte) 0xF, (byte) 0xBC, (byte) 0x1A,
                (byte) 0x50, (byte) 0xD6, (byte) 0xF8, (byte) 0xDD, (byte) 0x8C, (byte) 0x6C, (byte) 0xDB, (byte) 0xD,
                (byte) 0xA1, (byte) 0xC8, (byte) 0x26, (byte) 0xD0, (byte) 0x36, (byte) 0x2A, (byte) 0x38, (byte) 0x56,
                (byte) 0x2B, (byte) 0x9F, (byte) 0xD0, (byte) 0x7, (byte) 0x5, (byte) 0x92, (byte) 0xCC, (byte) 0xB2,
                (byte) 0xA7, (byte) 0x7B, (byte) 0xCB, (byte) 0x18, (byte) 0x90, (byte) 0xC7, (byte) 0x91, (byte) 0x9E,
                (byte) 0x28, (byte) 0x89, (byte) 0xD9, (byte) 0xBE, (byte) 0x6A, (byte) 0x3E, (byte) 0x1F, (byte) 0x5,
                (byte) 0xB, (byte) 0x66, (byte) 0x6, (byte) 0x7D, (byte) 0xC5, (byte) 0x4F, (byte) 0x7F, (byte) 0x92,
                (byte) 0x87, (byte) 0x5E, (byte) 0xD0, (byte) 0x0, (byte) 0xC7, (byte) 0xD5, (byte) 0xAE, (byte) 0xA3,
                (byte) 0xF2, (byte) 0x2C, (byte) 0x6F, (byte) 0xFE, (byte) 0xA6, (byte) 0xA6, (byte) 0x49, (byte) 0xC,
                (byte) 0x3A, (byte) 0x7F, (byte) 0xFE, (byte) 0x9, (byte) 0x6E, (byte) 0x2F, (byte) 0x8D, (byte) 0x43,
                (byte) 0x5A, (byte) 0xF, (byte) 0x18, (byte) 0x7B, (byte) 0x34, (byte) 0x0, (byte) 0x48, (byte) 0x2B,
                (byte) 0xCD, (byte) 0x47, (byte) 0xC8, (byte) 0x85, (byte) 0xD2, (byte) 0x9A, (byte) 0xF5, (byte) 0x35
        };

        byte[] expected = new byte[]{(byte) 0xAD, (byte) 0x73, (byte) 0xF2, (byte) 0xFB};

        byte[] result = CryptoHelper.crcHash(data);

        assertArrayEquals(expected, result);
    }

    @Test
    public void symmetricDecryptHMACIV() throws CryptoException {
        // response to logon request with 'testuser' and 'testpassword'

        byte[] data = new byte[]{
                (byte) 0x65, (byte) 0x32, (byte) 0x7D, (byte) 0x36, (byte) 0x68, (byte) 0xA1, (byte) 0x3C, (byte) 0xF6,
                (byte) 0x69, (byte) 0xD5, (byte) 0x0, (byte) 0xC2, (byte) 0xA1, (byte) 0x36, (byte) 0xA6, (byte) 0xBE,
                (byte) 0x4C, (byte) 0x5D, (byte) 0x53, (byte) 0x89, (byte) 0x8C, (byte) 0xCF, (byte) 0xB4, (byte) 0xCF,
                (byte) 0x4C, (byte) 0xAD, (byte) 0x52, (byte) 0xA8, (byte) 0x50, (byte) 0x8F, (byte) 0x20, (byte) 0x9E,
                (byte) 0x77, (byte) 0x4F, (byte) 0x3F, (byte) 0xDF, (byte) 0x40, (byte) 0x43, (byte) 0xEC, (byte) 0x58,
                (byte) 0x59, (byte) 0x59, (byte) 0x67, (byte) 0xE6, (byte) 0x97, (byte) 0x7D, (byte) 0xC9, (byte) 0xFE,
                (byte) 0xA3, (byte) 0x35, (byte) 0x4A, (byte) 0x5F, (byte) 0x4E, (byte) 0xCC, (byte) 0xC5, (byte) 0x68,
                (byte) 0x93, (byte) 0x64, (byte) 0x41, (byte) 0xFE, (byte) 0x1F, (byte) 0x55, (byte) 0xBC, (byte) 0xE3,
                (byte) 0x6A, (byte) 0x69, (byte) 0x98, (byte) 0x65, (byte) 0x53, (byte) 0x9D, (byte) 0x41, (byte) 0xD8,
                (byte) 0xD0, (byte) 0xE2, (byte) 0x80, (byte) 0x43, (byte) 0x76, (byte) 0xE2, (byte) 0x46, (byte) 0x35
        };

        byte[] key = new byte[]{
                (byte) 0x4C, (byte) 0x4C, (byte) 0xDF, (byte) 0xB2, (byte) 0xC0, (byte) 0x4C, (byte) 0x3, (byte) 0xA,
                (byte) 0xE9, (byte) 0x48, (byte) 0xB6, (byte) 0x5F, (byte) 0x20, (byte) 0x9F, (byte) 0x82, (byte) 0xEE,
                (byte) 0xFE, (byte) 0x45, (byte) 0x5D, (byte) 0xF9, (byte) 0xB9, (byte) 0x29, (byte) 0x30, (byte) 0xE4,
                (byte) 0xF, (byte) 0x5A, (byte) 0x1E, (byte) 0x13, (byte) 0x2E, (byte) 0xAF, (byte) 0x69, (byte) 0x78
        };

        byte[] secret = new byte[]{
                (byte) 0x4C, (byte) 0x4C, (byte) 0xDF, (byte) 0xB2, (byte) 0xC0, (byte) 0x4C, (byte) 0x3, (byte) 0xA,
                (byte) 0xE9, (byte) 0x48, (byte) 0xB6, (byte) 0x5F, (byte) 0x20, (byte) 0x9F, (byte) 0x82, (byte) 0xEE
        };

        byte[] expected = new byte[]{
                (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                (byte) 0x12, (byte) 0xaf, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x00, (byte) 0x2b, (byte) 0x00,
                (byte) 0x00, (byte) 0x00, (byte) 0xef, (byte) 0x02, (byte) 0x00, (byte) 0x80, (byte) 0x0f, (byte) 0x00,
                (byte) 0x00, (byte) 0x00, (byte) 0x09, (byte) 0x69, (byte) 0x83, (byte) 0xbc, (byte) 0x01, (byte) 0x01,
                (byte) 0x00, (byte) 0x10, (byte) 0x01, (byte) 0x10, (byte) 0xfe, (byte) 0xc3, (byte) 0xc5, (byte) 0xe7,
                (byte) 0x02, (byte) 0x08, (byte) 0x05, (byte) 0x50, (byte) 0x05, (byte) 0xa1, (byte) 0x01, (byte) 0x69,
                (byte) 0x83, (byte) 0xbc, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x01, (byte) 0xc0,
                (byte) 0x01, (byte) 0x00, (byte) 0xc8, (byte) 0x01, (byte) 0x00
        };

        byte[] result = CryptoHelper.symmetricDecryptHMACIV(data, key, secret);

        assertArrayEquals(expected, result);
    }
}