//file:noinspection GroovyAssignabilityCheck

plugins {
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.maven.publishPlugin)
    alias(libs.plugins.protobuf)
    id 'jacoco'
    id 'maven-publish'
    id 'projectversiongen'
    id 'signing'
    id 'steamlanguagegen'
}

allprojects {
    group 'in.dragonbra'
    version libs.versions.javaSteam.get()
}

sourceCompatibility = JavaVersion.toVersion(libs.versions.java.get())

repositories {
    mavenCentral()
}

protobuf.protoc {
    artifact = libs.protoc.get()
}

jacoco.toolVersion = libs.versions.jacoco.get()

jacocoTestReport.reports {
    xml.required = true
    html.required = false
}

javadoc {
    exclude "**/in/dragonbra/javasteam/protobufs/**"
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

// Only allow junit 5
configurations {
    configureEach {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// Note: builtBy() fixes gradle warning "Execution optimizations have been disabled for task"
sourceSets.main {
    java.srcDirs(
            files("build/generated/source/steamd/main/java").builtBy(generateSteamLanguage),
            files("build/generated/source/javasteam/main/java").builtBy(generateProjectVersion)
    )
}

check.dependsOn jacocoTestReport
compileJava.dependsOn(generateSteamLanguage)
compileJava.dependsOn(generateProjectVersion)

dependencies {
    implementation libs.commons.io
    implementation libs.commons.lang3
    implementation libs.commons.validator
    implementation libs.gson
    implementation libs.kotlin.coroutines
    implementation libs.kotlin.stdib
    implementation libs.okHttp
    implementation libs.protobufJava
    implementation libs.webSocket

    testImplementation libs.bundles.testing
}

/* Artifact publishing */

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'JavaSteam'
                packaging = 'jar'
                description = 'Java library to interact with Valve\'s Steam network.'
                url = 'https://github.com/Longi94/JavaSteam'
                inceptionYear = '2018'
                scm {
                    connection = 'scm:git:git://github.com/Longi94/JavaSteam.git'
                    developerConnection = 'scm:git:ssh://github.com:Longi94/JavaSteam.git'
                    url = 'http://github.com/Longi94/JavaSteam/tree/master'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'Longi'
                        name = 'Long Tran'
                        email = 'lngtrn94@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : stagingRepoUrl
            credentials {
                username = ossrhUsername ?: ''
                password = ossrhPassword ?: ''
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
