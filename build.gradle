//file:noinspection GroovyAssignabilityCheck

import in.dragonbra.steamlanguagegen.SteamLanguageGenPlugin

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // We're staying behind on a few versions on protobuf-gradle-plugin
        // See: https://github.com/google/protobuf-gradle-plugin/issues/641

        // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-gradle-plugin
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

group 'in.dragonbra'
version '1.2.0-SNAPSHOT'

allprojects {
    group 'in.dragonbra'
    version '1.2.0-SNAPSHOT'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'jacoco'
apply plugin: SteamLanguageGenPlugin

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.21.12'

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'

    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation 'commons-validator:commons-validator:1.7'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'


    // https://mvnrepository.com/artifact/com.squareup.okhttp3/mockwebserver
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    testImplementation 'commons-codec:commons-codec:1.15'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    testImplementation 'commons-io:commons-io:2.11.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:4.10.0'
    // https://mvnrepository.com/artifact/pl.pragmatists/JUnitParams
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
}

protobuf {
    protoc {
        // https://mvnrepository.com/artifact/com.google.protobuf/protoc
        artifact = 'com.google.protobuf:protoc:3.21.9'
    }
}

jacoco {
    // https://www.eclemma.org/jacoco
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

sourceSets {
    main {
        java {
            srcDirs += new File(buildDir, 'generated/source/steamd/main/java')
            srcDirs += new File(buildDir, 'generated/source/proto/main/java')
            srcDirs += new File(buildDir, 'generated/source/in/dragonbra/javasteam')
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task generatVersionClass {
    def outputDir = file("$buildDir/generated/source/in/dragonbra/javasteam/util")
    outputs.dir outputDir
    doFirst {
        outputDir.exists() || outputDir.mkdirs()
        new File(outputDir, "Versions.java")
                .write("""package in.dragonbra.javasteam.util;

public class Versions { 
    public static final String VERSION = \"$project.version\"; 
}""")
    }
}

compileJava.dependsOn generatVersionClass
compileJava.dependsOn generateSteamLanguage
check.dependsOn jacocoTestReport

javadoc {
    exclude "**/in/dragonbra/javasteam/protobufs/**"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'JavaSteam'
                    packaging = 'jar'
                    description = 'Java library to interact with Valve\'s Steam network.'
                    url = 'https://github.com/Longi94/JavaSteam'
                    inceptionYear = '2018'

                    scm {
                        connection = 'scm:git:git://github.com/Longi94/JavaSteam.git'
                        developerConnection = 'scm:git:ssh://github.com:Longi94/JavaSteam.git'
                        url = 'http://github.com/Longi94/JavaSteam/tree/master'
                    }

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }

                    developers {
                        developer {
                            id = 'Longi'
                            name = 'Long Tran'
                            email = 'lngtrn94@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : stagingRepoUrl
                credentials {
                    username = ossrhUsername ?: ''
                    password = ossrhPassword ?: ''
                }
            }
        }
    }
}
