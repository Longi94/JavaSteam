//file:noinspection GroovyAssignabilityCheck

// https://mvnrepository.com/artifact/io.github.gradle-nexus/publish-plugin
// https://mvnrepository.com/artifact/com.google.protobuf/protobuf-gradle-plugin
plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'com.google.protobuf' version "0.9.2"
    id 'jacoco'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'projectversiongen'
    id 'signing'
    id 'steamlanguagegen'
}

allprojects {
    group 'in.dragonbra'
    version '1.3.0-beta01'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// https://mvnrepository.com/artifact/com.google.protobuf/protoc
protobuf.protoc {
    artifact = 'com.google.protobuf:protoc:3.22.2'
}

// https://www.eclemma.org/jacoco
jacoco.toolVersion = "0.8.8"

jacocoTestReport.reports {
    xml.required = true
    html.required = false
}

javadoc {
    exclude "**/in/dragonbra/javasteam/protobufs/**"
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

// Note: Only allow junit 5
configurations {
    configureEach {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// Note: builtBy() fixes gradle warning "Execution optimizations have been disabled for task"
sourceSets.main {
    java.srcDirs(
            files("build/generated/source/steamd/main/java").builtBy(generateSteamLanguage),
            files("build/generated/source/javasteam/main/java").builtBy(generateProjectVersion)
    )
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

check.dependsOn jacocoTestReport
compileJava.dependsOn(generateSteamLanguage)
compileJava.dependsOn(generateProjectVersion)

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.0-Beta")

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.22.2'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation 'commons-validator:commons-validator:1.7'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.11.0'

    /* Unit Testing */

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/mockwebserver3-junit5
    testImplementation 'com.squareup.okhttp3:mockwebserver3-junit5:5.0.0-alpha.11'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    testImplementation 'commons-codec:commons-codec:1.15'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:4.11.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:4.11.0'
}

/* Artifact publishing */

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'JavaSteam'
                packaging = 'jar'
                description = 'Java library to interact with Valve\'s Steam network.'
                url = 'https://github.com/Longi94/JavaSteam'
                inceptionYear = '2018'
                scm {
                    connection = 'scm:git:git://github.com/Longi94/JavaSteam.git'
                    developerConnection = 'scm:git:ssh://github.com:Longi94/JavaSteam.git'
                    url = 'http://github.com/Longi94/JavaSteam/tree/master'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'Longi'
                        name = 'Long Tran'
                        email = 'lngtrn94@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : stagingRepoUrl
            credentials {
                username = ossrhUsername ?: ''
                password = ossrhPassword ?: ''
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
